<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zm.mapper.UserMapper" >
    <resultMap id="BaseResultMap" type="com.zm.model.User" >
        <constructor >
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="sex" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
            <arg column="age" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="username" jdbcType="VARCHAR" javaType="java.lang.String" />
            <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
            <arg column="email" jdbcType="VARCHAR" javaType="java.lang.String" />
        </constructor>
    </resultMap>
    <sql id="Base_Column_List" >
        id, sex, name, age, username, password, email
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.zm.model.User" >
        insert into user (id, sex, name,
        age, username, password,
        email)
        values (#{id,jdbcType=INTEGER}, #{sex,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
        #{age,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.zm.model.User" >
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="sex != null" >
                sex,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="age != null" >
                age,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="email != null" >
                email,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="sex != null" >
                #{sex,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="age != null" >
                #{age,jdbcType=INTEGER},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                #{email,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.zm.model.User" >
        update user
        <set >
            <if test="sex != null" >
                sex = #{sex,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="age != null" >
                age = #{age,jdbcType=INTEGER},
            </if>
            <if test="username != null" >
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                email = #{email,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zm.model.User" >
    update user
    set sex = #{sex,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    
    <!--测试代码-->
    <!--返回是list时,直接用list中的元素类来接收-->
    <select id="selectUserByNameStatementLike" parameterType="string" resultType="com.zm.model.User">
        <!--#{表示占位符类似preparedStatement}   ${表示字符串连接}  -->
        SELECT * from user where name LIKE  #{likename}
    </select>
    <select id="selectUserByNameStringLike" parameterType="string" resultType="com.zm.model.User">
        <!--${表示字符串的拼接}   ${表示字符串连接}  -->
        SELECT * from user where name LIKE  "${value}"
    </select>
    
    
    
    
    
</mapper>